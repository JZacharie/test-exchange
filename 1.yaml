stages:
  - validate
  - plan
  - apply_terraform
  - destroy_terraform

variables:
  PROJECT_NAME: EKS-BLUEPRINT

.init:
  variables:
    AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID_CULLIGAN}"
    AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY_CULLIGAN}"
    AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION_CULLIGAN}"
    AWS_ASSUME: "${AWS_ASSUME_ROLE_CULLIGAN}"
    TFSTATE_BUCKET: "${TFSTATE_BUCKET_CULLIGAN}"
    TFSTATE_KEY: "${TFSTATE_KEY_CULLIGAN}"
    TFSTATE_REGION: "${TFSTATE_REGION_CULLIGAN}"
    ENV: dev

.runner_init:
  image: 
    name: debian
    entrypoint:
        - /usr/bin/env
        - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

.script_init:        
  script: 
    - apt update && apt install -y curl unzip sudo git
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - sudo ./aws/install
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - curl https://releases.hashicorp.com/terraform/1.3.6/terraform_1.3.6_linux_amd64.zip -o "terraform_1.3.6_linux_amd64.zip"
    - unzip terraform_1.3.6_linux_amd64.zip
    - chmod +x terraform
    - ./kubectl version --client --output=yaml   
    - export PATH=$PWD:$PATH
    - export KST=`aws sts assume-role --role-arn ${AWS_ASSUME} --role-session-name "gitlabrunner" --region $AWS_DEFAULT_REGION --query '[Credentials.AccessKeyId,Credentials.SecretAccessKey,Credentials.SessionToken]' --output text`
    - export AWS_ACCESS_KEY_ID=`echo $KST | awk '{print $1;}'`
    - export AWS_SECRET_ACCESS_KEY=`echo $KST | awk '{print $2;}'`
    - export AWS_SESSION_TOKEN=`echo $KST | awk '{print $3;}'`
    - echo $TFSTATE_BUCKET
    - echo $TFSTATE_KEY
    - echo $TFSTATE_REGION
    - aws s3 ls
    - terraform --version

validate_terraform:
  stage: validate
  when: manual
  extends: 
   - .init
   - .runner_init
  script: 
    - !reference [.script_init, script]
    - terraform init -backend-config="bucket=${TFSTATE_BUCKET}" -backend-config="key=${TFSTATE_KEY}" -backend-config="region=${TFSTATE_REGION}"
    - terraform validate

plan_terraform:
  stage: plan
  when: manual
  only:
    - develop  
  extends: 
   - .init
   - .runner_init
  script: 
    - !reference [.script_init, script]
    - terraform init -backend-config="bucket=${TFSTATE_BUCKET}" -backend-config="key=${TFSTATE_KEY}" -backend-config="region=${TFSTATE_REGION}"
    - terraform validate 
    - terraform plan -var-file="culligan_${ENV}.tfvars"

apply_terraform:
  stage: apply_terraform
  when: manual
  only:
    - develop
  extends: 
   - .init
   - .runner_init    
  script:
    - !reference [.script_init, script]
    - terraform init -backend-config="bucket=${TFSTATE_BUCKET}" -backend-config="key=${TFSTATE_KEY}" -backend-config="region=${TFSTATE_REGION}"
    - terraform plan -var-file=culligan_${ENV}.tfvars -out terraform_plan
    - terraform apply terraform_plan

destroy_terraform:
  stage: destroy_terraform
  when: manual
  variables:
    ENV: dev  
  only:
    - develop  
  extends: 
   - .init
   - .runner_init
  script:
    - !reference [.script_init, script]
    - terraform init -backend-config="bucket=${TFSTATE_BUCKET}" -backend-config="key=${TFSTATE_KEY}" -backend-config="region=${TFSTATE_REGION}"
    - terraform destroy -var-file=culligan_${ENV}.tfvars --auto-approve
